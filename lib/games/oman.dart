// ๐ lib/games/oman.dart
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:audioplayers/audioplayers.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';

class OmanGameScreen extends StatefulWidget {
  const OmanGameScreen({Key? key}) : super(key: key);

  @override
  _OmanGameScreenState createState() => _OmanGameScreenState();
}

class _OmanGameScreenState extends State<OmanGameScreen> {
  int currentIndex = 0;
  String? selectedAnswer;
  bool answered = false;
  bool showStars = false;

  BannerAd? _bannerAd;
  InterstitialAd? _interstitialAd;
  bool _isBannerAdReady = false;

  final List<Map<String, dynamic>> questions = [
    {
      'question': 'ูุง ุงุณู ุงูุฎูุฌุฑ ุงูุชูููุฏู ุงูุฐู ูููุจุณู ุงูุฑุฌุงู ูู ุนููุงูุ',
      'options': ['ุงูุฌูุจูู', 'ุงูุณูู', 'ุงูุฎูุฌุฑ ุงูุนูุงูู', 'ุงูููุณ'],
      'answer': 'ุงูุฎูุฌุฑ ุงูุนูุงูู',
    },
    {
      'question': 'ูุง ุงุณู ุงูุฑูุตุฉ ุงูุดุนุจูุฉ ุงููุดููุฑุฉ ูู ุณูุทูุฉ ุนููุงูุ',
      'options': ['ุงูุฏุจูุฉ', 'ุงูุนุงุฒู', 'ุงูุนุฑุถุฉ', 'ุงูุณุงูุฑู'],
      'answer': 'ุงูุนุงุฒู',
    },
    {
      'question': 'ูุง ุงุณู ุงูุฒู ุงูุชูููุฏู ูููุณุงุก ูู ุนููุงูุ',
      'options': ['ุงูุฏุดุฏุงุดุฉ', 'ุงูุซูุจ', 'ุงูุญุฌุงุจ', 'ุงูุนุจุงุกุฉ'],
      'answer': 'ุงูุซูุจ',
    },
    {
      'question': 'ูุง ุงุณู ุงููุฌุจุฉ ุงูุนูุงููุฉ ุงูุชู ุชูุทูู ูู ุญูุฑุฉ ุชุญุช ุงูุฃุฑุถุ',
      'options': ['ุงูุซุฑูุฏ', 'ุงูุดูุง', 'ุงููุจููู', 'ุงููุฑูุณ'],
      'answer': 'ุงูุดูุง',
    },
    {
      'question': 'ุฃู ููุงูุฉ ุนููุงููุฉ ุชุดุชูุฑ ุจุตูุงุนุฉ ุงููุฎุงุฑ ุงูุชูููุฏูุ',
      'options': ['ูุฒูู', 'ุตูุฑ', 'ุตูุงูุฉ', 'ุจููุงุก'],
      'answer': 'ุจููุงุก',
    },
    {
      'question': 'ูุง ูู ุฃุฏุงุฉ ุงูุทุญู ุงูุชูููุฏูุฉ ูู ุนูุงูุ',
      'options': ['ุงูุฑุญู', 'ุงูููุฎู', 'ุงููุงูู', 'ุงููุจุดุฑุฉ'],
      'answer': 'ุงูุฑุญู',
    },
    {
      'question': 'ูุง ุงุณู ุงูุฃููุฉ ุงูุดุนุจูุฉ ุงููุตููุนุฉ ูู ุงูุชูุฑ ูุงูุฏููู ูุงูุณููุ',
      'options': ['ุงููุฑูุณ', 'ุงูุญููู ุงูุนูุงููุฉ', 'ุงูุซุฑูุฏ', 'ุงูุนุตูุฏุฉ'],
      'answer': 'ุงูุนุตูุฏุฉ',
    },
    {
      'question': 'ูุง ุงุณู ุงูููุนุฉ ุงูุชุงุฑูุฎูุฉ ุงูููุฌูุฏุฉ ูู ููุงูุฉ ูุฒููุ',
      'options': ['ููุนุฉ ุจููุงุก', 'ููุนุฉ ูุฒูู', 'ููุนุฉ ุงูุฑุณุชุงู', 'ููุนุฉ ุตุญุงุฑ'],
      'answer': 'ููุนุฉ ูุฒูู',
    },
    {
      'question': 'ูุง ูู ุงูุฃุฏุงุฉ ุงูุชูููุฏูุฉ ุงูุชู ูุณุชุนูููุง ุงูุตูุงุฏูู ูู ุนููุงู ูุตูุฏ ุงูุฃุณูุงูุ',
      'options': ['ุงูุดุจูุฉ', 'ุงูุณูุงุฑุฉ', 'ุงูุฑูุญ', 'ุงูุทุนู'],
      'answer': 'ุงูุดุจูุฉ',
    },
    {
      'question': 'ุฃู ููุงูุฉ ุนููุงููุฉ ุชุดุชูุฑ ุจุตูุงุนุฉ ุงูุณูู ุงูุฎุดุจูุฉุ',
      'options': ['ุตูุฑ', 'ูุฒูู', 'ูุณูุท', 'ุนุจุฑู'],
      'answer': 'ุตูุฑ',
    },
    {
      'question': 'ูุง ุงุณู ุงูุญููู ุงูุนูุงููุฉ ุงููุดููุฑุฉุ',
      'options': ['ุงูููุงูุฉ', 'ุงูุญููู ุงูุนูุงููุฉ', 'ุงููุนููู', 'ุงูุบุฑูุจุฉ'],
      'answer': 'ุงูุญููู ุงูุนูุงููุฉ',
    },
    {
      'question': 'ูุง ุงุณู ุงูุณูู ุงูุชูููุฏู ุงูุดููุฑ ูู ูุณูุทุ',
      'options': ['ุณูู ูุทุฑุญ', 'ุณูู ูุฒูู', 'ุณูู ุงูุฑุณุชุงู', 'ุณูู ุจููุงุก'],
      'answer': 'ุณูู ูุทุฑุญ',
    },
    {
      'question': 'ูุง ุงุณู ุงูุฌุจู ุงูุฃุนูู ูู ุณูุทูุฉ ุนููุงูุ',
      'options': ['ุฌุจู ุงูุดูุณ', 'ุฌุจู ุงูุฃุฎุถุฑ', 'ุฌุจู ุญููุช', 'ุฌุจู ุณูุญุงู'],
      'answer': 'ุฌุจู ุงูุดูุณ',
    },
    {
      'question': 'ูุง ุงุณู ุงูููุทูุฉ ุงูุชู ุชุดุชูุฑ ุจุฒุฑุงุนุฉ ุงููุฎูู ูู ุนููุงูุ',
      'options': ['ุธูุงุฑ', 'ุงูุฏุงุฎููุฉ', 'ุงูุจุงุทูุฉ', 'ุงูุดุฑููุฉ'],
      'answer': 'ุงูุฏุงุฎููุฉ',
    },
    {
      'question': 'ูุง ุงุณู ุฃุฏุงุฉ ุงูุณูู ุงูุชูููุฏูุฉ ูู ุนูุงูุ',
      'options': ['ุงูุฏูู', 'ุงูุดุงุฏูู', 'ุงูููุฌ', 'ุงูุจุฑููู'],
      'answer': 'ุงูููุฌ',
    },
    {
      'question': 'ูุง ุงุณู ุงูุณูููุฉ ุงูุชูููุฏูุฉ ุงูุนูุงููุฉ ุงููุจูุฑุฉุ',
      'options': ['ุงูุฌุงูุจูุช', 'ุงูุดูุนู', 'ุงูุจุบูุฉ', 'ุงูุฏูู'],
      'answer': 'ุงูุจุบูุฉ',
    },
    {
      'question': 'ูุง ุงุณู ุงููุจุงุณ ุงูุชูููุฏู ููุฑุฌุงู ูู ุนููุงูุ',
      'options': ['ุงูุซูุจ', 'ุงูุฏุดุฏุงุดุฉ', 'ุงูููุทุงู', 'ุงูุฌูุจุงุจ'],
      'answer': 'ุงูุฏุดุฏุงุดุฉ',
    },
    {
      'question': 'ูุง ูู ุงููุดุฑูุจ ุงูุดุนุจู ุงูุฐู ูููุฏู ููุถููู ูู ุนููุงูุ',
      'options': ['ุงูุดุงู', 'ุงููููุฉ ุงูุนูุงููุฉ', 'ุงูุนุตูุฑ', 'ุงูุญููุจ'],
      'answer': 'ุงููููุฉ ุงูุนูุงููุฉ',
    },
    {
      'question': 'ูุง ุงุณู ุงูุงุญุชูุงู ุงูุฏููู ุงููุจูุฑ ุงูุฐู ูุญุชูู ุจู ุงูุนูุงูููู ูู ููุงูุฉ ุฑูุถุงูุ',
      'options': ['ุนูุฏ ุงููุทุฑ', 'ุนูุฏ ุงูุฃุถุญู', 'ุงููููุฏ ุงููุจูู', 'ูููุฉ ุงููุฏุฑ'],
      'answer': 'ุนูุฏ ุงููุทุฑ',
    },
    {
      'question': 'ุฃู ูู ุงููุฏู ุงูุชุงููุฉ ูุงูุช ุนุงุตูุฉ ุนูุงู ุงููุฏููุฉุ',
      'options': ['ูุฒูู', 'ุตูุฑ', 'ูุณูุท', 'ุตูุงูุฉ'],
      'answer': 'ูุฒูู',
    },
    {
      'question': 'ูุง ุงุณู ุงูุดุฌุฑุฉ ุงูุชู ุชุดุชูุฑ ุจูุง ูุญุงูุธุฉ ุธูุงุฑ ูุชุณุชุฎุฏู ูู ุฅูุชุงุฌ ุงููุจุงูุ',
      'options': ['ุงููุฑุฎ', 'ุงููุฎูู', 'ุงููุจุงู', 'ุงูุณุฏุฑ'],
      'answer': 'ุงููุจุงู',
    },
    {
      'question': 'ูุง ุงุณู ุงููุณุงุก ุงูุชูููุฏู ุงูุฐู ููุถุน ุนูู ุฑุฃุณ ุงููุณุงุก ูู ุนูุงูุ',
      'options': ['ุงููุญุงู', 'ุงูุดููุฉ', 'ุงูุจุฑูุน', 'ุงูุญุฌุงุจ'],
      'answer': 'ุงูุดููุฉ',
    },
    {
      'question': 'ูุง ุงุณู ุงูุญุฑูุฉ ุงูุชูููุฏูุฉ ูุตูุงุนุฉ ุงูุณุนููุงุชุ',
      'options': ['ุงููุฎุงุฑ', 'ุงููุณูุฌ', 'ุงูุณุนููุงุช', 'ุงููุฌุงุฑุฉ'],
      'answer': 'ุงูุณุนููุงุช',
    },
    {
      'question': 'ุฃู ูู ุงูููุงูุงุช ุงูุชุงููุฉ ุชุดุชูุฑ ุจุงููุจุงูุ',
      'options': ['ุตุญุงุฑ', 'ูุฒูู', 'ุตูุงูุฉ', 'ุจููุงุก'],
      'answer': 'ุตูุงูุฉ',
    },
    {
      'question': 'ูุง ุงุณู ุงูุนูุฏ ุงููุทูู ูุณูุทูุฉ ุนูุงูุ',
      'options': ['ุนูุฏ ุงูุงุชุญุงุฏ', 'ุงูุนูุฏ ุงููุทูู', 'ุนูุฏ ุงูููุถุฉ', 'ุนูุฏ ุงูุชุญุฑูุฑ'],
      'answer': 'ุงูุนูุฏ ุงููุทูู',
    },
    {
      'question': 'ูุง ุงุณู ุงููุงุฏู ุงููุดููุฑ ูู ููุงูุฉ ูุงุฏู ุจูู ุฎุงูุฏุ',
      'options': ['ูุงุฏู ุงููุจูุฑ', 'ูุงุฏู ุจูู ุฎุงูุฏ', 'ูุงุฏู ุดุงุจ', 'ูุงุฏู ุฏุฑุจุงุช'],
      'answer': 'ูุงุฏู ุจูู ุฎุงูุฏ',
    },
    {
      'question': 'ูุง ุงุณู ุงูุฃุฏุงุฉ ุงูุชูููุฏูุฉ ุงููุณุชุฎุฏูุฉ ูุญูู ุงููุงุกุ',
      'options': ['ุงูุฌุฑูุฉ', 'ุงูุณุทู', 'ุงูุฏูู', 'ุงููุฑุจุฉ'],
      'answer': 'ุงููุฑุจุฉ',
    },
    {
      'question': 'ูุง ุงุณู ุงููุฌุจุฉ ุงูุชู ุชูุฏู ุบุงูุจูุง ูู ุงูููุงุณุจุงุช ุงูุฑุณููุฉ ูุงูุฃุนุฑุงุณ ูู ุนูุงูุ',
      'options': ['ุงูุซุฑูุฏ', 'ุงูุดูุง', 'ุงููุจููู', 'ุงูููุฏู'],
      'answer': 'ุงููุจููู',
    },
    {
      'question': 'ูุง ุงุณู ุงูููุฑุฌุงู ุงูุฐู ููุงู ุณูููุงู ูู ูุญุงูุธุฉ ุธูุงุฑุ',
      'options': ['ููุฑุฌุงู ูุณูุท', 'ููุฑุฌุงู ูุฒูู', 'ููุฑุฌุงู ุตูุงูุฉ', 'ููุฑุฌุงู ุจููุงุก'],
      'answer': 'ููุฑุฌุงู ุตูุงูุฉ',
    },
    {
      'question': 'ูุง ุงุณู ุงูุณูููุฉ ุงูุนูุงููุฉ ุงูุชู ุดุงุฑูุช ูู ุงูุฑุญูุงุช ุงูุจุญุฑูุฉ ุฅูู ุดุฑู ุฃูุฑูููุง ูุงูููุฏุ',
      'options': ['ุงูุฏูู', 'ุงูุณูุจูู', 'ุงูุบูุฌุฉ', 'ุงูุดูุนู'],
      'answer': 'ุงูุบูุฌุฉ',
    },
    {
      'question': 'ูุง ุงุณู ููุทูุฉ ุงุณุชุฎุฑุงุฌ ุงููุญุงุณ ูู ุนููุงู ูุฏููุงูุ',
      'options': ['ุตุญุงุฑ', 'ูุฒูู', 'ุงูุฑุณุชุงู', 'ุนุจุฑู'],
      'answer': 'ุตุญุงุฑ',
    },
    {
      'question': 'ูุง ุงุณู ุงูุฒุฎุฑูุฉ ุงูุชู ุชููุฒ ุงูุนูุงุฑุฉ ุงูุนูุงููุฉ ุงูุชูููุฏูุฉุ',
      'options': ['ุงูููุฑูุตุงุช', 'ุงููุณููุณุงุก', 'ุงููููุด ุงูููุฏุณูุฉ', 'ุงูุฃุฑุงุจูุณู'],
      'answer': 'ุงููููุด ุงูููุฏุณูุฉ',
    },
    {
      'question': 'ูุง ุงุณู ุงูุญุฑูุฉ ุงูุชูููุฏูุฉ ูุตูุงุนุฉ ุงูุฎูุตุ',
      'options': ['ุงููุฌุงุฑุฉ', 'ุงูุฎูุตูุงุช', 'ุงูุณุนููุงุช', 'ุงููุฎุงุฑ'],
      'answer': 'ุงูุฎูุตูุงุช',
    },
    {
      'question': 'ูุง ุงุณู ุงูุณูุณูุฉ ุงูุฌุจููุฉ ุงูุชู ุชูุชุฏ ูู ุดูุงู ุนููุงูุ',
      'options': ['ุฌุจุงู ุงูุญุฌุฑ', 'ุฌุจุงู ุนุณูุฑ', 'ุฌุจุงู ุงูุจุญุฑ ุงูุฃุญูุฑ', 'ุฌุจุงู ุงูุฃุทูุณ'],
      'answer': 'ุฌุจุงู ุงูุญุฌุฑ',
    },
    {
      'question': 'ูุง ุงุณู ุงูุทุงุฆุฑ ุงููุทูู ูู ุนูุงูุ',
      'options': ['ุงููุณุฑ', 'ุงูุตูุฑ', 'ุงูุญุจุงุฑู', 'ุงูุญูุงู'],
      'answer': 'ุงูุญุจุงุฑู',
    },
    {
      'question': 'ูุง ุงุณู ุงููุจุงุช ุงูุฐู ููุณุชุฎุฏู ูู ุงูุทุจ ุงูุดุนุจู ุงูุนูุงููุ',
      'options': ['ุงูุญุจู', 'ุงููุจุงู', 'ุงูุญูุจุฉ', 'ุงููุฑูู'],
      'answer': 'ุงููุจุงู',
    },
    {
      'question': 'ูุง ุงุณู ุงูุณูู ุงูุชูููุฏู ูู ููุงูุฉ ูุฒููุ',
      'options': ['ุณูู ูุทุฑุญ', 'ุณูู ูุฒูู', 'ุณูู ุจููุงุก', 'ุณูู ุงูุฑุณุชุงู'],
      'answer': 'ุณูู ูุฒูู',
    },
    {
      'question': 'ูุง ุงุณู ุงูุจุฑุฌ ุงูุดููุฑ ูู ููุนุฉ ุจููุงุกุ',
      'options': ['ุจุฑุฌ ุงูุฑูุญ', 'ุจุฑุฌ ุงูุฑูุงูู', 'ุจุฑุฌ ุงููุฑุงูุจุฉ', 'ุจุฑุฌ ุจููุงุก'],
      'answer': 'ุจุฑุฌ ุงูุฑูุญ',
    },
    {
      'question': 'ูุง ุงุณู ุงูุนูุฏ ุงูุฐู ูุญุชูู ููู ุงูุนูุงูููู ูู 18 ููููุจุฑ ูู ูู ุนุงูุ',
      'options': ['ุงูุนูุฏ ุงููุทูู', 'ุนูุฏ ุงูููุถุฉ', 'ุนูุฏ ุงูุฃุถุญู', 'ุนูุฏ ุงููุทุฑ'],
      'answer': 'ุงูุนูุฏ ุงููุทูู',
    },
    {
      'question': 'ูุง ุงุณู ุงูููุนุฉ ุงูุดููุฑุฉ ูู ููุงูุฉ ุงูุฑุณุชุงูุ',
      'options': ['ููุนุฉ ูุฒูู', 'ููุนุฉ ุจููุงุก', 'ููุนุฉ ุงูุฑุณุชุงู', 'ููุนุฉ ุตุญุงุฑ'],
      'answer': 'ููุนุฉ ุงูุฑุณุชุงู',
    },
    {
      'question': 'ูุง ุงุณู ุงูุฃุฏูุงุช ุงูุชูููุฏูุฉ ูุตูุน ุงููููุฉ ุงูุนูุงููุฉุ',
      'options': ['ุงูุฏูุฉ', 'ุงูุฅุจุฑูู', 'ุงูุทุงุณุฉ', 'ุงูููุจ'],
      'answer': 'ุงูุฏูุฉ',
    },
    {
      'question': 'ูุง ุงุณู ููุน ุงูุดุนุฑ ุงูุดุนุจู ุงูุนูุงูู ุงูุฐู ููููู ูู ุงูููุงุณุจุงุชุ',
      'options': ['ุงููุตูุฏุฉ', 'ุงูุนุงุฒู', 'ุงูุฒุฌู', 'ุงููุจุทู'],
      'answer': 'ุงูุนุงุฒู',
    },
    {
      'question': 'ูุง ุงุณู ุงููุจุงุณ ุงูุชูููุฏู ููุฃุทูุงู ุงูุฐููุฑ ูู ุนูุงูุ',
      'options': ['ุงููููุต', 'ุงูุฏุดุฏุงุดุฉ', 'ุงูุซูุจ', 'ุงูุฌูุจุงุจ'],
      'answer': 'ุงูุฏุดุฏุงุดุฉ',
    },
    {
      'question': 'ูุง ุงุณู ุงููุงุฏู ุงูุดููุฑ ุงูุฐู ูุฌุฑู ุฎูุงู ููุณู ุงูุฃูุทุงุฑ ูู ุตูุงูุฉุ',
      'options': ['ูุงุฏู ุฏุฑุจุงุช', 'ูุงุฏู ุจูู ุฎุงูุฏ', 'ูุงุฏู ุดุงุจ', 'ูุงุฏู ุงููุจูุฑ'],
      'answer': 'ูุงุฏู ุฏุฑุจุงุช',
    },
    {
      'question': 'ูุง ุงุณู ุงูุฃุฏุงุฉ ุงูุชู ุชุณุชุฎุฏู ูู ููู ุงูุจุถุงุฆุน ุนูู ุธููุฑ ุงูุญููุฑ ูุฏููุงูุ',
      'options': ['ุงูููุฉ', 'ุงูุฎุฑุฌ', 'ุงูุดูุงู', 'ุงูุญููุจุฉ'],
      'answer': 'ุงูุฎุฑุฌ',
    },
    {
      'question': 'ูุง ุงุณู ุงูุฑูุตุฉ ุงูุชูููุฏูุฉ ุงูุชู ุชูุณุชุฎุฏู ูููุง ุงูุณูููุ',
      'options': ['ุงูุนุฑุถุฉ', 'ุงูุนุงุฒู', 'ุงูุฏุจูุฉ', 'ุงูุณุงูุฑู'],
      'answer': 'ุงูุนุฑุถุฉ',
    },
    {
      'question': 'ูุง ุงุณู ุงูุดุงุทุฆ ุงูุดููุฑ ูู ููุงูุฉ ุตูุฑุ',
      'options': ['ุดุงุทุฆ ุงููุฑู', 'ุดุงุทุฆ ุงูุฃุดุฎุฑุฉ', 'ุดุงุทุฆ ุตูุฑ', 'ุดุงุทุฆ ุตูุงูุฉ'],
      'answer': 'ุดุงุทุฆ ุงูุฃุดุฎุฑุฉ',
    },
    {
      'question': 'ูุง ุงุณู ุงููุจุงุช ุงูุฐู ููุณุชุฎุฑุฌ ููู ุงูุฏุจุงุก ุงููุณุชุฎุฏู ูู ุงูุฃูุงูู ุงูุชูููุฏูุฉุ',
      'options': ['ุงูููุทูู', 'ุงูุญุจู', 'ุงูุฎูุงุฑ', 'ุงููุนูุงุน'],
      'answer': 'ุงูููุทูู',
    },
    {
      'question': 'ูุง ุงุณู ุงููุชุงุจ ุงูุชุงุฑูุฎู ุงูุฐู ููุซู ุญูุงุฉ ุงูุนูุงูููู ูุฏููุงูุ',
      'options': ['ุชุงุฑูุฎ ุนูุงู', 'ูุนุงูู ุชุงุฑูุฎ ุนูุงู', 'ุงููุชุญ ุงููุจูู', 'ุฑุญูุฉ ุนูุงู'],
      'answer': 'ูุนุงูู ุชุงุฑูุฎ ุนูุงู',
    },
    {
      'question': 'ูุง ุงุณู ุงูููุงูุฉ ุงูุชู ุชุดุชูุฑ ุจุนููููุง ุงููุงุฆูุฉ ุงูุญุงุฑุฉุ',
      'options': ['ุจููุงุก', 'ุงูุฑุณุชุงู', 'ูุฒูู', 'ุตูุฑ'],
      'answer': 'ุงูุฑุณุชุงู',
    },
    {
      'question': 'ูุง ุงุณู ุงูุญุฑูุฉ ุงูุชูููุฏูุฉ ูุตูุงุนุฉ ุงูุณูุงูููุ',
      'options': ['ุงููุฌุงุฑุฉ', 'ุงูุญุฏุงุฏุฉ', 'ุงูููุด', 'ุงูุฎุฑุงุทุฉ'],
      'answer': 'ุงูุญุฏุงุฏุฉ',
    },
    {
      'question': 'ูุง ุงุณู ุงูุบุทุงุก ุงูุชูููุฏู ุงูุฐู ููุถุน ุนูู ุงููู ูููุณุงุก ูู ุจุนุถ ููุงุทู ุนูุงูุ',
      'options': ['ุงูุจุฑูุน', 'ุงูููุงุจ', 'ุงูุดููุฉ', 'ุงููุญุงู'],
      'answer': 'ุงูุจุฑูุน',
    },
    {
      'question': 'ูุง ุงุณู ุงููุฃููู ุงูุดุนุจู ุงูุฐู ููุตูุน ูู ุงูุฃุฑุฒ ูุงููุญู ูุงูุจูุงุฑุงุชุ',
      'options': ['ุงูุดูุง', 'ุงููุจููู', 'ุงูุซุฑูุฏ', 'ุงููุฑูุณ'],
      'answer': 'ุงููุจููู',
    },
    // ุฅุถุงูุฉ ุงููุฒูุฏ ูู ุงูุฃุณุฆูุฉ ุญุณุจ ุงูุญุงุฌุฉ
  ];

  final AudioPlayer _player = AudioPlayer();

  @override
  void initState() {
    super.initState();
    MobileAds.instance.initialize();
    _loadBannerAd();
    _loadInterstitialAd();
  }

  @override
  void dispose() {
    _bannerAd?.dispose();
    _interstitialAd?.dispose();
    super.dispose();
  }

  void _loadBannerAd() {
    final bannerId = Platform.isIOS
        ? 'ca-app-pub-8177765238464378/6200887168'
        : 'ca-app-pub-8177765238464378/2519324267';

    _bannerAd = BannerAd(
      adUnitId: bannerId,
      request: const AdRequest(),
      size: AdSize.banner,
      listener: BannerAdListener(
        onAdLoaded: (_) => setState(() => _isBannerAdReady = true),
        onAdFailedToLoad: (ad, err) => ad.dispose(),
      ),
    )..load();
  }

  void _loadInterstitialAd() {
    final interstitialId = Platform.isIOS
        ? 'ca-app-pub-8177765238464378/9594108317'
        : 'ca-app-pub-8177765238464378/1345294657';

    InterstitialAd.load(
      adUnitId: interstitialId,
      request: const AdRequest(),
      adLoadCallback: InterstitialAdLoadCallback(
        onAdLoaded: (ad) => _interstitialAd = ad,
        onAdFailedToLoad: (err) => _interstitialAd = null,
      ),
    );
  }

  void _showInterstitialAd() {
    if (_interstitialAd != null) {
      _interstitialAd!.fullScreenContentCallback = FullScreenContentCallback(
        onAdDismissedFullScreenContent: (ad) {
          ad.dispose();
          _loadInterstitialAd();
        },
        onAdFailedToShowFullScreenContent: (ad, err) {
          ad.dispose();
          _loadInterstitialAd();
        },
      );
      _interstitialAd!.show();
      _interstitialAd = null;
    }
  }

  void playSound(bool correct) async {
    await _player.play(AssetSource(correct ? 'sounds/correct.mp3' : 'sounds/wrong.mp3'));
    if (correct) triggerStarEffect();
  }

  void triggerStarEffect() {
    setState(() => showStars = true);
    Future.delayed(const Duration(seconds: 2), () {
      if (mounted) setState(() => showStars = false);
    });
  }

  void selectAnswer(String option) {
    if (!answered) {
      final correct = option == questions[currentIndex]['answer'];
      playSound(correct);
      setState(() {
        selectedAnswer = option;
        answered = true;
      });
    }
  }

  void nextQuestion() {
    if (currentIndex < questions.length - 1) {
      setState(() {
        currentIndex++;
        selectedAnswer = null;
        answered = false;
      });
    } else {
      _showInterstitialAd();
      setState(() {
        currentIndex = 0;
        selectedAnswer = null;
        answered = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final question = questions[currentIndex];

    return Directionality(
      textDirection: TextDirection.rtl,
      child: Scaffold(
        extendBodyBehindAppBar: true,
        backgroundColor: Colors.transparent,
        appBar: AppBar(
          backgroundColor: Colors.teal.shade800.withOpacity(0.8),
          elevation: 0,
          title: Text(
            'ุฃูุบุงุฒ ูู ุณูุทูุฉ ุนูุงู',
            style: GoogleFonts.cairo(fontSize: 22, fontWeight: FontWeight.bold),
          ),
          leading: const BackButton(color: Colors.white),
        ),
        bottomNavigationBar: _isBannerAdReady
            ? SizedBox(
          height: _bannerAd!.size.height.toDouble(),
          child: AdWidget(ad: _bannerAd!),
        )
            : null,
        body: SafeArea(
          child: Container(
            decoration: const BoxDecoration(
              gradient: LinearGradient(
                colors: [Color(0xFF00897B), Color(0xFF80CBC4)],
                begin: Alignment.topRight,
                end: Alignment.bottomLeft,
              ),
            ),
            child: Stack(
              children: [
                Padding(
                  padding: const EdgeInsets.all(24),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      Text(
                        'ุงูุณุคุงู ${currentIndex + 1} ูู ${questions.length}',
                        style: GoogleFonts.cairo(
                          fontSize: 20,
                          fontWeight: FontWeight.w600,
                          color: Colors.white,
                        ),
                      ),
                      const SizedBox(height: 24),
                      Text(
                        question['question'],
                        style: GoogleFonts.cairo(
                          fontSize: 24,
                          fontWeight: FontWeight.w700,
                          color: Colors.white,
                        ),
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 32),
                      ...question['options'].map<Widget>((option) {
                        final isCorrect = option == question['answer'];
                        final isSelected = option == selectedAnswer;
                        Color? bgColor;
                        if (answered) {
                          bgColor = isCorrect
                              ? Colors.green
                              : (isSelected ? Colors.red : Colors.grey.shade300);
                        }
                        return Container(
                          width: double.infinity,
                          margin: const EdgeInsets.symmetric(vertical: 8),
                          child: ElevatedButton(
                            style: ElevatedButton.styleFrom(
                              backgroundColor: bgColor ?? Colors.teal.shade600,
                              foregroundColor: Colors.white,
                              elevation: 5,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(16),
                              ),
                              padding: const EdgeInsets.symmetric(vertical: 16),
                            ),
                            onPressed: () => selectAnswer(option),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                if (answered && isSelected && !isCorrect)
                                  const Padding(
                                    padding: EdgeInsets.only(right: 8),
                                    child: Icon(Icons.close, size: 20),
                                  ),
                                Text(option, style: GoogleFonts.cairo(fontSize: 18)),
                              ],
                            ),
                          ),
                        );
                      }).toList(),
                      const SizedBox(height: 32),
                      if (answered)
                        ElevatedButton(
                          onPressed: nextQuestion,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.teal.shade800,
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 14),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          child: Text('ุงูุชุงูู', style: GoogleFonts.cairo(fontSize: 18)),
                        ),
                    ],
                  ),
                ),
                if (showStars)
                  Positioned.fill(
                    child: IgnorePointer(
                      child: Center(
                        child: AnimatedOpacity(
                          opacity: showStars ? 1 : 0,
                          duration: const Duration(milliseconds: 300),
                          child: AnimatedScale(
                            scale: showStars ? 1.5 : 0.0,
                            duration: const Duration(milliseconds: 300),
                            child: const Icon(Icons.star, size: 80),
                          ),
                        ),
                      ),
                    ),
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
