// ๐ lib/games/science.dart
import 'dart:async';
import 'dart:io';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:audioplayers/audioplayers.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:shared_preferences/shared_preferences.dart';

class ScienceGameScreen extends StatefulWidget {
  const ScienceGameScreen({Key? key}) : super(key: key);

  @override
  _ScienceGameScreenState createState() => _ScienceGameScreenState();
}

class _ScienceGameScreenState extends State<ScienceGameScreen> {
  int currentStage = 0;
  int currentQuestionIndex = 0;
  int score = 0;
  bool gameFinished = false;
  int timer = 15;
  Timer? countdown;
  int bestScore = 0;

  final AudioPlayer player = AudioPlayer();
  List<_StarData> _stars = [];

  BannerAd? _bannerAd;
  InterstitialAd? _interstitialAd;
  bool _isInterstitialReady = false;

  // ุฃุณุฆูุฉ ุงูุนููู: ููููู ุฅุถุงูุฉ ูุฑุงุญู ูุฃุณุฆูุฉ ุฅุถุงููุฉ
  final List<List<Map<String, dynamic>>> stages = [
    [
      {
        'question': 'ูุง ูู ุงููููุจ ุงูุฃูุฑุจ ุฅูู ุงูุดูุณุ',
        'options': ['ุนุทุงุฑุฏ', 'ุงูุฃุฑุถ', 'ุงูุฒูุฑุฉ', 'ุงููุฑูุฎ'],
        'answer': 'ุนุทุงุฑุฏ',
      },
      {
        'question': 'ูุง ูู ุงูุนุถู ุงููุณุคูู ุนู ุถุฎ ุงูุฏู ูู ุฌุณู ุงูุฅูุณุงูุ',
        'options': ['ุงูููุจ', 'ุงูุฑุฆุฉ', 'ุงููุจุฏ', 'ุงููุนุฏุฉ'],
        'answer': 'ุงูููุจ',
      },
      {
        'question': 'ูุง ูู ุญุงูุฉ ุงููุงุก ุนูุฏ ุชุฌููุฏูุ',
        'options': ['ุตูุจ', 'ุณุงุฆู', 'ุบุงุฒ', 'ุจุฎุงุฑ'],
        'answer': 'ุตูุจ',
      },
      {
        'question': 'ุฃู ูู ูุฐู ุงูุญููุงูุงุช ููุตูู ูู ุงูุจุฑูุงุฆูุงุชุ',
        'options': ['ุงูุถูุฏุน', 'ุงูููุจ', 'ุงูุฌูู', 'ุงูุฏุฌุงุฌุฉ'],
        'answer': 'ุงูุถูุฏุน',
      },
      {
        'question': 'ูุง ูู ุงูุบุงุฒ ุงููุงุฒู ูุนูููุฉ ุงูุชููุณุ',
        'options': ['ุงูุฃูุณุฌูู', 'ุซุงูู ุฃูุณูุฏ ุงููุฑุจูู', 'ุงูููุฏุฑูุฌูู', 'ุงูููุชุฑูุฌูู'],
        'answer': 'ุงูุฃูุณุฌูู',
      },
      {
        'question': 'ุฃู ูู ูุฐู ุงููุจุงุชุงุช ููุฒุฑุน ุจูุซุฑุฉ ูู ุนูุงูุ',
        'options': ['ุงููุฎูู', 'ุงูููุญ', 'ุงูุดุนูุฑ', 'ุงูุฃุฑุฒ'],
        'answer': 'ุงููุฎูู',
      },
      {
        'question': 'ูุง ูู ุงููุญุฏุฉ ุงูุฃุณุงุณูุฉ ูููุงุณ ุงูุทููุ',
        'options': ['ุงููุชุฑ', 'ุงูููููุบุฑุงู', 'ุงููุชุฑ', 'ุงูุซุงููุฉ'],
        'answer': 'ุงููุชุฑ',
      },
      {
        'question': 'ูุง ูู ุงููุตุฏุฑ ุงูุฑุฆูุณู ููุทุงูุฉ ุนูู ุงูุฃุฑุถุ',
        'options': ['ุงูุดูุณ', 'ุงููุงุก', 'ุงูุฑูุงุญ', 'ุงููุญู'],
        'answer': 'ุงูุดูุณ',
      },
      {
        'question': 'ูุง ุงุณู ุฃูุจุฑ ูููุจ ูู ุงููุฌููุนุฉ ุงูุดูุณูุฉุ',
        'options': ['ุงููุดุชุฑู', 'ุงููุฑูุฎ', 'ุงูุฃุฑุถ', 'ุฒุญู'],
        'answer': 'ุงููุดุชุฑู',
      },
      {
        'question': 'ูุง ุงุณู ุงูุนูููุฉ ุงูุชู ุชุตูุน ุจูุง ุงููุจุงุชุงุช ุบุฐุงุกูุงุ',
        'options': ['ุงูุชุฑููุจ ุงูุถูุฆู', 'ุงูุชููุณ', 'ุงูุชูุซูู ุงูุบุฐุงุฆู', 'ุงูููู'],
        'answer': 'ุงูุชุฑููุจ ุงูุถูุฆู',
      },
      {
        'question': 'ุฃู ุฌุฒุก ูู ุงููุจุงุช ูุณุคูู ุนู ุงูุชุตุงุต ุงููุงุกุ',
        'options': ['ุงูุฌุฐูุฑ', 'ุงูุณุงู', 'ุงูุฃูุฑุงู', 'ุงูุฒูุฑุฉ'],
        'answer': 'ุงูุฌุฐูุฑ',
      },
      {
        'question': 'ุฃู ูู ูุฐู ุงูุญููุงูุงุช ููุฏุฏุฉ ุจุงูุงููุฑุงุถ ูู ุนูุงูุ',
        'options': ['ุงูููุง ุงูุนุฑุจู', 'ุงูุฌูู', 'ุงูุญุตุงู', 'ุงููุงุนุฒ'],
        'answer': 'ุงูููุง ุงูุนุฑุจู',
      },
      {
        'question': 'ูุง ุงุณู ุงูุฌูุงุฒ ุงูุฐู ูุณุชุฎุฏูู ุงูุทุจูุจ ูุณูุงุน ุฏูุงุช ุงูููุจุ',
        'options': ['ุณูุงุนุฉ ุงูุทุจูุจ', 'ุงูุชุฑูููุชุฑ', 'ุงููุฌูุฑ', 'ุงูููุฒุงู'],
        'answer': 'ุณูุงุนุฉ ุงูุทุจูุจ',
      },
      {
        'question': 'ูุง ูู ุฃูุจุฑ ุฃุนุถุงุก ุฌุณู ุงูุฅูุณุงูุ',
        'options': ['ุงูุฌูุฏ', 'ุงููุจุฏ', 'ุงูููุจ', 'ุงููุนุฏุฉ'],
        'answer': 'ุงูุฌูุฏ',
      },
      {
        'question': 'ูุง ุงุณู ุงููุงุฏุฉ ุงูุตูุจุฉ ุงูุชู ุชุบุทู ุงูุฃุณูุงูุ',
        'options': ['ุงููููุง', 'ุงููุจ', 'ุงูุนุงุฌ', 'ุงูุนุธู'],
        'answer': 'ุงููููุง',
      },
      {
        'question': 'ูุง ุงุณู ุงููููุจ ุงูุฃุญูุฑุ',
        'options': ['ุงููุฑูุฎ', 'ุงูุฒูุฑุฉ', 'ุนุทุงุฑุฏ', 'ุงูุฃุฑุถ'],
        'answer': 'ุงููุฑูุฎ',
      },
      {
        'question': 'ูุง ูู ุงูุญููุงู ุงูุฐู ููุตูุน ููู ุงูุญุฑูุฑ ุงูุทุจูุนูุ',
        'options': ['ุฏูุฏุฉ ุงููุฒ', 'ุงููุญูุฉ', 'ุงููุฑุงุดุฉ', 'ุงูุตุฑุตูุฑ'],
        'answer': 'ุฏูุฏุฉ ุงููุฒ',
      },
      {
        'question': 'ูุง ุงุณู ุงูุฌูุงุฒ ุงููุณุคูู ุนู ุฅุฎุฑุงุฌ ุงููุถูุงุช ูู ุงูุฌุณูุ',
        'options': ['ุงูุฌูุงุฒ ุงูุจููู', 'ุงูุฌูุงุฒ ุงูุชููุณู', 'ุงูุฌูุงุฒ ุงููุถูู', 'ุงูุฌูุงุฒ ุงูุนุตุจู'],
        'answer': 'ุงูุฌูุงุฒ ุงูุจููู',
      },
      {
        'question': 'ุฃู ูู ูุฐู ุงูุธูุงูุฑ ููุชุฌ ุนููุง ุถูุก ูุตูุชุ',
        'options': ['ุงูุจุฑู', 'ุงููุทุฑ', 'ุงููุฏู', 'ุงูุตููุน'],
        'answer': 'ุงูุจุฑู',
      },
      {
        'question': 'ูุง ุงุณู ุงูุนูููุฉ ุงูุชู ูุชุญูู ูููุง ุงููุงุก ูู ุณุงุฆู ุฅูู ุจุฎุงุฑุ',
        'options': ['ุงูุชุจุฎุฑ', 'ุงูุชูุงุซู', 'ุงูุชุฌูุฏ', 'ุงูุชุฑุณูุจ'],
        'answer': 'ุงูุชุจุฎุฑ',
      },
      {
        'question': 'ูุง ุงุณู ุงูุนุธู ุงูุฃูุจุฑ ูู ุฌุณู ุงูุฅูุณุงูุ',
        'options': ['ุนุธู ุงููุฎุฐ', 'ุนุธู ุงูุฐุฑุงุน', 'ุนุธู ุงูุณุงู', 'ุนุธู ุงููุชู'],
        'answer': 'ุนุธู ุงููุฎุฐ',
      },
      {
        'question': 'ุฃู ูู ูุฐู ุงููุงุฆูุงุช ูุณุชุทูุน ุชุบููุฑ ููููุ',
        'options': ['ุงูุญุฑุจุงุก', 'ุงูุฃุฑูุจ', 'ุงููุทุฉ', 'ุงูููุจ'],
        'answer': 'ุงูุญุฑุจุงุก',
      },
      {
        'question': 'ุฃู ูููุจ ูุฏูุฑ ุญููู ููุฑ ุงุณูู "ุชูุชุงู"ุ',
        'options': ['ุฒุญู', 'ุงููุฑูุฎ', 'ุงูุฃุฑุถ', 'ุงููุดุชุฑู'],
        'answer': 'ุฒุญู',
      },
      {
        'question': 'ูุง ูู ุงูุณุงุฆู ุงูุฐู ูููู ุงูุบุฐุงุก ูุงูุฃูุณุฌูู ูู ุงูุฌุณูุ',
        'options': ['ุงูุฏู', 'ุงููุงุก', 'ุงููุนุงุจ', 'ุงูุนุตุงุฑุฉ'],
        'answer': 'ุงูุฏู',
      },
      {
        'question': 'ูุง ูู ุงุณู ุงููุงุฏุฉ ุงูุชู ุชุนุทู ุงููุจุงุชุงุช ููููุง ุงูุฃุฎุถุฑุ',
        'options': ['ุงููุฎุถูุฑ (ุงููููุฑูููู)', 'ุงููุงุก', 'ุงูุฃูุณุฌูู', 'ุงููุงูุณููู'],
        'answer': 'ุงููุฎุถูุฑ (ุงููููุฑูููู)',
      },
      {
        'question': 'ูุง ูู ุฃุตุบุฑ ุนุธูุฉ ูู ุฌุณู ุงูุฅูุณุงูุ',
        'options': ['ุนุธูุฉ ุงูุฑูุงุจ', 'ุนุธูุฉ ุงููุฎุฐ', 'ุนุธูุฉ ุงููุชู', 'ุนุธูุฉ ุงูุณุงู'],
        'answer': 'ุนุธูุฉ ุงูุฑูุงุจ',
      },
      {
        'question': 'ุฃู ููุน ูู ุงูุตุฎูุฑ ูุณุชุฎุฏูู ุงูุนูุงูููู ููุจูุงุก ุงูุชูููุฏูุ',
        'options': ['ุงูุญุฌุฑ ุงูุฌูุฑู', 'ุงูุฌุฑุงููุช', 'ุงูุตูุงู', 'ุงูุญุฌุฑ ุงูุฑููู'],
        'answer': 'ุงูุญุฌุฑ ุงูุฌูุฑู',
      },
      {
        'question': 'ุฃู ููุน ูู ุงูุทููุฑ ููุงุฌุฑ ุนุจุฑ ุนูุงู ุณูููุงูุ',
        'options': ['ุทุงุฆุฑ ุงููููู', 'ุงูุฏุฌุงุฌ', 'ุงูุนุตููุฑ', 'ุงูุจููุฉ'],
        'answer': 'ุทุงุฆุฑ ุงููููู',
      },
      {
        'question': 'ูุง ูู ุงูุญููุงู ุงูุฐู ูุจูุถ ููุง ููุฏุ',
        'options': ['ุงูุทููุฑ', 'ุงููุทุฉ', 'ุงูุญุตุงู', 'ุงูุฃุฑูุจ'],
        'answer': 'ุงูุทููุฑ',
      },
      {
        'question': 'ุฃู ุญุงุณุฉ ุชุณุชุฎุฏููุง ุงูุฃุณูุงู ูุงูุชุดุงู ุงูุชูุงุฑุงุช ุงููุงุฆูุฉุ',
        'options': ['ุงูุฎุท ุงูุฌุงูุจู', 'ุงูุนูู', 'ุงูุฃุฐู', 'ุงููู'],
        'answer': 'ุงูุฎุท ุงูุฌุงูุจู',
      },
      {
        'question': 'ูุง ุงุณู ุงูุทุจูุฉ ุงูุชู ุชุญูู ุงูุฃุฑุถ ูู ุงูุฃุดุนุฉ ุงูุถุงุฑุฉุ',
        'options': ['ุทุจูุฉ ุงูุฃูุฒูู', 'ุทุจูุฉ ุงูุชุฑูุจูุณููุฑ', 'ุทุจูุฉ ุงูุณุชุฑุงุชูุณููุฑ', 'ุทุจูุฉ ุงููุดุฑุฉ'],
        'answer': 'ุทุจูุฉ ุงูุฃูุฒูู',
      },
      {
        'question': 'ุฃู ุญููุงู ููุนุฏ ูู ุงูุฒูุงุญูุ',
        'options': ['ุงูุณุญููุฉ', 'ุงูุฃุฑูุจ', 'ุงูุฏุฌุงุฌุฉ', 'ุงููุทุฉ'],
        'answer': 'ุงูุณุญููุฉ',
      },
      {
        'question': 'ูุง ูู ุงูุบุงุฒ ุงูุฃูุซุฑ ูุฌูุฏูุง ูู ุงูููุงุก ุงูุฌููุ',
        'options': ['ุงูููุชุฑูุฌูู', 'ุงูุฃูุณุฌูู', 'ุซุงูู ุฃูุณูุฏ ุงููุฑุจูู', 'ุงูููุฏุฑูุฌูู'],
        'answer': 'ุงูููุชุฑูุฌูู',
      },
      {
        'question': 'ูุง ุงุณู ุงูุนูููุฉ ุงูุชู ุชุชุญูู ูููุง ุงููุฑูุฉ ุฅูู ูุฑุงุดุฉุ',
        'options': ['ุงูุชุญูู', 'ุงูุชููุณ', 'ุงูุงููุณุงู', 'ุงูุชุจุฎุฑ'],
        'answer': 'ุงูุชุญูู',
      },
      {
        'question': 'ุฃู ูู ุงูุฃุฌูุฒุฉ ุงูุชุงููุฉ ูุณุชุฎุฏู ูุชูุจูุฑ ุงูุฃุดูุงุก ุงูุตุบูุฑุฉุ',
        'options': ['ุงููุฌูุฑ', 'ุงููุณุทุฑุฉ', 'ุงูููุฒุงู', 'ุงูุชูุณููุจ'],
        'answer': 'ุงููุฌูุฑ',
      },
      {
        'question': 'ุฃู ุนุถู ูุณุคูู ุนู ุงูุชุฐููุ',
        'options': ['ุงููุณุงู', 'ุงูุฃูู', 'ุงูุนูู', 'ุงูุฃุฐู'],
        'answer': 'ุงููุณุงู',
      },
      {
        'question': 'ุฃู ุทุงูุฉ ูุณุชููุฏ ูููุง ูู ุญุฑูุฉ ุงูุฑูุงุญุ',
        'options': ['ุทุงูุฉ ุงูุฑูุงุญ', 'ุงูุทุงูุฉ ุงูุดูุณูุฉ', 'ุงูุทุงูุฉ ุงูุญุฑุงุฑูุฉ', 'ุงูุทุงูุฉ ุงูููููุฉ'],
        'answer': 'ุทุงูุฉ ุงูุฑูุงุญ',
      },
      {
        'question': 'ุฃู ูู ุงูุชุงูู ูุตุฏุฑ ุทุงูุฉ ูุชุฌุฏุฏุ',
        'options': ['ุงูุดูุณ', 'ุงููุญู', 'ุงูููุท', 'ุงูุบุงุฒ'],
        'answer': 'ุงูุดูุณ',
      },
      {
        'question': 'ุฃู ุฌูุงุฒ ูุณุชุฎุฏูู ุงูุทูุงุจ ููููุงุณ ูู ุงูุชุฌุงุฑุจุ',
        'options': ['ุงููุณุทุฑุฉ', 'ุงููุทุฑูุฉ', 'ุงูููู', 'ุงููุฑุดุงุฉ'],
        'answer': 'ุงููุณุทุฑุฉ',
      },
      {
        'question': 'ุฃู ููุน ูู ุงูุญูุงุณ ูุณุชุฎุฏูู ุงูุฎูุงุด ููุตูุฏุ',
        'options': ['ุงูุณูุน', 'ุงูุจุตุฑ', 'ุงูุดู', 'ุงูููุณ'],
        'answer': 'ุงูุณูุน',
      },
      {
        'question': 'ุฃู ูู ูุฐู ุงูุญููุงูุงุช ูู ุงูุซุฏููุงุชุ',
        'options': ['ุงูุฏูููู', 'ุงูุชูุณุงุญ', 'ุงูุนุตููุฑ', 'ุงูุณูุงุญู'],
        'answer': 'ุงูุฏูููู',
      },
      {
        'question': 'ุฃู ุฌูุงุฒ ูุณุคูู ุนู ุงูุชุญูู ูู ุงูุฌุณูุ',
        'options': ['ุงูุฌูุงุฒ ุงูุนุตุจู', 'ุงูุฌูุงุฒ ุงููุถูู', 'ุงูุฌูุงุฒ ุงูุชููุณู', 'ุงูุฌูุงุฒ ุงูุจููู'],
        'answer': 'ุงูุฌูุงุฒ ุงูุนุตุจู',
      },
      {
        'question': 'ุฃู ูุนุฏู ููุฌุฏ ุจูุซุฑุฉ ูู ุฌุจุงู ุนูุงูุ',
        'options': ['ุงููุญุงุณ', 'ุงูุฐูุจ', 'ุงููุถุฉ', 'ุงูุญุฏูุฏ'],
        'answer': 'ุงููุญุงุณ',
      },
      {
        'question': 'ุฃู ูู ูุฐู ุงูููุงูุจ ููุณ ูู ุฃููุงุฑุ',
        'options': ['ุนุทุงุฑุฏ', 'ุงูุฃุฑุถ', 'ุฒุญู', 'ุงููุฑูุฎ'],
        'answer': 'ุนุทุงุฑุฏ',
      },
      {
        'question': 'ุฃู ููุน ูู ุงูุฃุดุฌุงุฑ ููุฒุฑุน ูุตุฏ ุงูุฑูุงุญ ูู ุนูุงูุ',
        'options': ['ุงููุฎูู', 'ุงูุฃุซู', 'ุงูุฒูุชูู', 'ุงูุจุฑุชูุงู'],
        'answer': 'ุงูุฃุซู',
      },
      {
        'question': 'ุฃู ูู ูุฐู ุงูุฃุฌูุฒุฉ ูููุณ ุฏุฑุฌุฉ ุงูุญุฑุงุฑุฉุ',
        'options': ['ุงูุชุฑูููุชุฑ', 'ุงููุณุทุฑุฉ', 'ุงูุณุงุนุฉ', 'ุงูููุฒุงู'],
        'answer': 'ุงูุชุฑูููุชุฑ',
      },
      {
        'question': 'ูุง ุงุณู ุงูุนูููุฉ ุงูุชู ุชุญุงูุธ ุนูู ููุน ุงููุงุฆู ุงูุญูุ',
        'options': ['ุงูุชูุงุซุฑ', 'ุงูุชููุณ', 'ุงููุถู', 'ุงูููู'],
        'answer': 'ุงูุชูุงุซุฑ',
      },
      {
        'question': 'ุฃู ุฌุฒุก ูู ุงูุนูู ูุณุคูู ุนู ุงูุฑุคูุฉุ',
        'options': ['ุงูุดุจููุฉ', 'ุงูุนุฏุณุฉ', 'ุงููุฑููุฉ', 'ุงููุฒุญูุฉ'],
        'answer': 'ุงูุดุจููุฉ',
      },
      {
        'question': 'ุฃู ูู ูุฐู ุงูุตุฎูุฑ ูุณุชุฎุฏู ูู ุตูุงุนุฉ ุงูุทูุจ ูู ุนูุงูุ',
        'options': ['ุงูุญุฌุฑ ุงูุฌูุฑู', 'ุงูุฌุฑุงููุช', 'ุงูููุงุฑุชุฒ', 'ุงูุตูุงู'],
        'answer': 'ุงูุญุฌุฑ ุงูุฌูุฑู',
      },
      {
        'question': 'ูุง ุงุณู ุฃูุจุฑ ุจุญุฑ ูู ุงูุนุงููุ',
        'options': ['ุจุญุฑ ุงูุนุฑุจ', 'ุงูุจุญุฑ ุงููุชูุณุท', 'ุจุญุฑ ูุฒููู', 'ุงูุจุญุฑ ุงูุฃุญูุฑ'],
        'answer': 'ุจุญุฑ ุงูุนุฑุจ',
      },
      {
        'question': 'ุฃู ุฌูุงุฒ ูุณุชุนููู ุงูุทูุงุจ ููุดุงูุฏุฉ ุงูุฃุฌุณุงู ุงูุจุนูุฏุฉุ',
        'options': ['ุงูุชูุณููุจ', 'ุงููุณุทุฑุฉ', 'ุงููุฌูุฑ', 'ุงูููู'],
        'answer': 'ุงูุชูุณููุจ',
      },
    ],
  ];

  bool? wasCorrect;
  String? selectedOption;
  bool showAnswer = false;
  bool showNextButton = false;

  @override
  void initState() {
    super.initState();
    loadBestScore();
    startTimer();
    _loadBannerAd();
    _loadInterstitialAd();
  }

  void startTimer() {
    timer = 15;
    countdown?.cancel();
    countdown = Timer.periodic(const Duration(seconds: 1), (_) {
      setState(() {
        timer--;
        if (timer == 0 && !showAnswer) checkAnswer(null);
      });
    });
  }

  void playSound(bool correct) async {
    await player.play(AssetSource(correct ? 'sounds/correct.mp3' : 'sounds/wrong.mp3'));
  }

  void showStars() {
    final rand = Random();
    final w = MediaQuery.of(context).size.width;
    final h = MediaQuery.of(context).size.height;
    setState(() {
      _stars = List.generate(20, (_) => _StarData(
        left: rand.nextDouble() * (w - 24),
        top: rand.nextDouble() * (h - 100),
        size: 12 + rand.nextDouble() * 8,
        opacity: 1,
      ));
    });
    Future.delayed(const Duration(milliseconds: 400), () {
      setState(() => _stars.clear());
    });
  }

  void checkAnswer(String? option) {
    countdown?.cancel();
    final correct = stages[currentStage][currentQuestionIndex]['answer'];
    setState(() {
      selectedOption = option;
      wasCorrect = option != null && option == correct;
      showAnswer = true;
      showNextButton = true;
    });
    playSound(wasCorrect!);
    if (wasCorrect == true) {
      score++;
      showStars();
    }
  }

  void nextQuestion() {
    if (currentQuestionIndex < stages[currentStage].length - 1) {
      currentQuestionIndex++;
      resetQuestion();
      startTimer();
    } else if (currentStage < stages.length - 1) {
      currentStage++;
      currentQuestionIndex = 0;
      resetQuestion();
      startTimer();
    } else {
      finishGame();
    }
  }

  void resetQuestion() {
    selectedOption = null;
    wasCorrect = null;
    showAnswer = false;
    showNextButton = false;
  }

  Future<void> finishGame() async {
    setState(() => gameFinished = true);
    _showInterstitialAd();
    final prefs = await SharedPreferences.getInstance();
    if (score > bestScore) await prefs.setInt('best_science_score', score);
    setState(() => bestScore = score);
  }

  Future<void> loadBestScore() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() => bestScore = prefs.getInt('best_science_score') ?? 0);
  }

  void restartGame() {
    setState(() {
      currentStage = 0;
      currentQuestionIndex = 0;
      score = 0;
      gameFinished = false;
      resetQuestion();
      _stars.clear();
    });
    startTimer();
  }

  void _loadBannerAd() {
    final id = Platform.isIOS
        ? 'ca-app-pub-8177765238464378/6200886168'
        : 'ca-app-pub-8177765238464378/2519324267';
    _bannerAd = BannerAd(
      adUnitId: id,
      size: AdSize.banner,
      request: const AdRequest(),
      listener: BannerAdListener(onAdLoaded: (_) => setState(() {})),
    )..load();
  }

  void _loadInterstitialAd() {
    final id = Platform.isIOS
        ? 'ca-app-pub-8177765238464378/9594108317'
        : 'ca-app-pub-8177765238464378/1345294657';
    InterstitialAd.load(
      adUnitId: id,
      request: const AdRequest(),
      adLoadCallback: InterstitialAdLoadCallback(
        onAdLoaded: (ad) { _interstitialAd = ad; _isInterstitialReady = true; },
        onAdFailedToLoad: (_) => _isInterstitialReady = false,
      ),
    );
  }

  void _showInterstitialAd() {
    if (_isInterstitialReady && _interstitialAd != null) {
      _interstitialAd!.show();
      _interstitialAd = null;
      _isInterstitialReady = false;
      _loadInterstitialAd();
    }
  }

  @override
  void dispose() {
    countdown?.cancel();
    player.dispose();
    _bannerAd?.dispose();
    _interstitialAd?.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final totalQ = stages.fold<int>(0, (sum, s) => sum + s.length);
    final question = stages[currentStage][currentQuestionIndex];
    final adHeight = _bannerAd?.size.height.toDouble() ?? 0;

    return Scaffold(
      backgroundColor: const Color(0xFFF9F9F9),
      appBar: AppBar(
        title: Text('ุชุญุฏู ุงูุนููู', style: GoogleFonts.cairo()),
        backgroundColor: Colors.red.shade800,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      bottomNavigationBar: _bannerAd != null
          ? SafeArea(
        child: SizedBox(
          width: _bannerAd!.size.width.toDouble(),
          height: adHeight,
          child: AdWidget(ad: _bannerAd!),
        ),
      )
          : null,
      body: gameFinished
          ? Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('๐ ุงูุชูุช ุงููุนุจุฉ!', style: GoogleFonts.cairo(fontSize: 28, fontWeight: FontWeight.bold)),
            const SizedBox(height: 12),
            Text('ุฏุฑุฌุชู: $score ูู $totalQ', style: GoogleFonts.cairo(fontSize: 20)),
            Text('ุฃูุถู ูุชูุฌุฉ: $bestScore', style: GoogleFonts.cairo(fontSize: 18)),
            const SizedBox(height: 30),
            ElevatedButton(
              onPressed: restartGame,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red.shade700,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
              ),
              child: Text('ุฅุนุงุฏุฉ ุงููุญุงููุฉ', style: GoogleFonts.cairo()),
            ),
          ],
        ),
      )
          : Stack(
        children: [
          ..._stars.map((s) => Positioned(
            left: s.left,
            top: s.top,
            child: AnimatedOpacity(
              opacity: s.opacity,
              duration: const Duration(milliseconds: 150),
              child: Icon(Icons.star, color: Colors.amber, size: s.size),
            ),
          )),
          SingleChildScrollView(
            padding: EdgeInsets.fromLTRB(20, 20, 20, adHeight + 20),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                Text(
                  'ุงููุฑุญูุฉ ${currentStage + 1}/${stages.length} - ุงูุณุคุงู ${currentQuestionIndex + 1}/${stages[currentStage].length}',
                  style: GoogleFonts.cairo(fontSize: 20, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 10),
                Text('โฑ ุงูููุช: $timer ุซุงููุฉ', style: GoogleFonts.cairo(fontSize: 18, color: Colors.red)),
                const SizedBox(height: 20),
                Text(
                  question['question'],
                  style: GoogleFonts.cairo(fontSize: 22, fontWeight: FontWeight.w600),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 30),
                ...question['options'].map<Widget>((opt) {
                  Color bg = Colors.grey.shade300;
                  Color fg = Colors.black;
                  if (showAnswer) {
                    if (opt == question['answer']) {
                      bg = Colors.green;
                      fg = Colors.white;
                    } else if (selectedOption == opt) {
                      bg = Colors.redAccent;
                      fg = Colors.white;
                    }
                  }
                  return Container(
                    width: double.infinity,
                    margin: const EdgeInsets.symmetric(vertical: 6),
                    child: ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        backgroundColor: bg,
                        foregroundColor: fg,
                        elevation: 3,
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                        padding: const EdgeInsets.symmetric(vertical: 14),
                      ),
                      onPressed: showAnswer ? null : () => checkAnswer(opt),
                      child: Text(opt, style: GoogleFonts.cairo(fontSize: 18)),
                    ),
                  );
                }),
                if (showAnswer)
                  Column(
                    children: [
                      if (wasCorrect == true)
                        Text(
                          'ุฅุฌุงุจุฉ ุตุญูุญุฉ! โ ุงูุฅุฌุงุจุฉ ูู: ${question['answer']}',
                          style: GoogleFonts.cairo(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.green),
                          textAlign: TextAlign.center,
                        ),
                      if (wasCorrect == false) ...[
                        Text(
                          'ุฅุฌุงุจุฉ ุฎุงุทุฆุฉ! ุฅุฌุงุจุชู: ${selectedOption}',
                          style: GoogleFonts.cairo(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.redAccent),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 6),
                        Text(
                          'ุงูุฅุฌุงุจุฉ ุงูุตุญูุญุฉ: ${question['answer']}',
                          style: GoogleFonts.cairo(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.green),
                          textAlign: TextAlign.center,
                        ),
                      ],
                      if (showNextButton)
                        Padding(
                          padding: const EdgeInsets.only(top: 16),
                          child: ElevatedButton(
                            onPressed: nextQuestion,
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.red.shade800,
                              foregroundColor: Colors.white,
                              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(14)),
                              padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 12),
                            ),
                            child: Text('ุงูุชุงูู', style: GoogleFonts.cairo(fontSize: 17)),
                          ),
                        ),
                    ],
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class _StarData {
  final double left;
  final double top;
  final double size;
  final double opacity;
  _StarData({required this.left, required this.top, required this.size, required this.opacity});
}
